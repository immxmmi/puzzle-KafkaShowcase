apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: mykafka-cluster
  namespace: kafka
spec:
  cruiseControl:
    config:
      webserver.ssl.enable: false
      webserver.security.enable: false
      security.protocol: PLAINTEXT
      ssl.client.auth: none

  entityOperator:
    topicOperator: {}

  kafka:
    storage:
      type: persistent-claim
      size: 2Gi  # Persistente Speicherung für Kafka-Broker
      class: standard

    listeners:
      - name: internal
        port: 9092
        tls: false
        type: internal

    config:
      auto.create.topics.enable: false
      default.replication.factor: 2
      delete.topic.enable: false
      min.insync.replicas: 2
      process.roles: broker
      node.id: 0
      controller.quorum.voters: 0@mykafka-cluster-kafka-0.mykafka-cluster-kafka-bootstrap.kafka.svc:9093
      offsets.topic.replication.factor: 1  # Required for clusters with less than 3 brokers to avoid coordinator errors
      transaction.state.log.replication.factor: 1  # Ensures transaction logs can be created in small clusters
      transaction.state.log.min.isr: 1  # Minimum in-sync replicas for transaction logs in small clusters

---

### **KafkaNodePool für Broker**
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: broker-pool
  namespace: kafka
  labels:
    strimzi.io/cluster: mykafka-cluster
spec:
  replicas: 3  # Drei Kafka-Broker
  roles:
    - broker
  storage:
    type: persistent-claim
    size: 20Gi
    class: standard

---

### **KafkaNodePool für Controller**
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: controller-pool
  namespace: kafka
  labels:
    strimzi.io/cluster: mykafka-cluster
spec:
  replicas: 2  # Zwei dedizierte Controller-Nodes
  roles:
    - controller
  storage:
    type: persistent-claim
    size: 2Gi
    class: standard